<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TShockAPI</name>
    </assembly>
    <members>
        <member name="M:TShockAPI.DB.RegionManager.ListAllRegions(System.String)">
            <summary>
            Gets all the regions names from world
            </summary>
            <param name="worldid">World name to get regions from</param>
            <returns>List of regions with only their names</returns>
        </member>
        <member name="M:TShockAPI.SaveManager.OnSaveWorld(System.Boolean,System.ComponentModel.HandledEventArgs)">
            <summary>
            SaveWorld event handler which notifies users that the server may lag
            </summary>
        </member>
        <member name="M:TShockAPI.SaveManager.SaveWorld(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Saves the map data
            </summary>
            <param name="wait">wait for all pending saves to finish (default: true)</param>
            <param name="resetTime">reset the last save time counter (default: false)</param>
            <param name="direct">use the realsaveWorld method instead of saveWorld event (default: false)</param>
        </member>
        <member name="M:TShockAPI.SaveManager.Dispose">
            <summary>
            Processes any outstanding saves, shutsdown the save thread and returns
            </summary>
        </member>
        <member name="M:TShockAPI.DB.GenericQueryCreator.AlterTable(TShockAPI.DB.SqlTable,TShockAPI.DB.SqlTable)">
            <summary>
            Alter a table from source to destination
            </summary>
            <param name="from">Must have name and column names. Column types are not required</param>
            <param name="to">Must have column names and column types.</param>
            <returns></returns>
        </member>
        <member name="P:TShockAPI.DB.SqlColumn.Length">
            <summary>
            Length of the data type, null = default
            </summary>
        </member>
        <member name="M:TShockAPI.DB.DbExt.Query(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Executes a query on a database.
            </summary>
            <param name="olddb">Database to query</param>
            <param name="query">Query string with parameters as @0, @1, etc.</param>
            <param name="args">Parameters to be put in the query</param>
            <returns>Rows affected by query</returns>
        </member>
        <member name="M:TShockAPI.DB.DbExt.QueryReader(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Executes a query on a database.
            </summary>
            <param name="olddb">Database to query</param>
            <param name="query">Query string with parameters as @0, @1, etc.</param>
            <param name="args">Parameters to be put in the query</param>
            <returns>Query result as IDataReader</returns>
        </member>
        <member name="M:TShockAPI.DB.GroupManager.AddGroup(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds group with name and permissions if it does not exist.
            </summary>
            <param name="name">name of group</param>
            <param name="parentname">parent of group</param>
            <param name="permissions">permissions</param>
            <param name="chatcolor">chatcolor</param>
            <param name="exceptions">exceptions true indicates use exceptions for errors false otherwise</param>
        </member>
        <member name="M:TShockAPI.DB.GroupManager.UpdateGroup(System.String,System.String,System.String,System.String)">
            <summary>
            Updates a group including permissions
            </summary>
            <param name="name">name of the group to update</param>
            <param name="parentname">parent of group</param>
            <param name="permissions">permissions</param>
            <param name="chatcolor">chatcolor</param>
        </member>
        <member name="M:TShockAPI.DB.UserManager.AddUser(TShockAPI.DB.User)">
            <summary>
            Adds a given username to the database
            </summary>
            <param name="user">User user</param>
        </member>
        <member name="M:TShockAPI.DB.UserManager.RemoveUser(TShockAPI.DB.User)">
            <summary>
            Removes a given username from the database
            </summary>
            <param name="user">User user</param>
        </member>
        <member name="M:TShockAPI.DB.UserManager.SetUserPassword(TShockAPI.DB.User,System.String)">
            <summary>
            Sets the Hashed Password for a given username
            </summary>
            <param name="user">User user</param>
            <param name="group">string password</param>
        </member>
        <member name="M:TShockAPI.DB.UserManager.SetUserGroup(TShockAPI.DB.User,System.String)">
            <summary>
            Sets the group for a given username
            </summary>
            <param name="user">User user</param>
            <param name="group">string group</param>
        </member>
        <member name="M:TShockAPI.DB.UserManager.GetGroupForIP(System.String)">
            <summary>
            Returns a Group for a ip from the database
            </summary>
            <param name="ply">string ip</param>
        </member>
        <member name="T:MaxMind.GeoIPCountry">
            <summary>
            Allows for looking up a country based on an IP address.  See www.maxmind.com for more details.
            </summary>
            <example>
            	static void Main(string[] args)
            	{
            		using(GeoIPCountry geo = new GeoIPCountry("GeoIP.dat"))
            		{
            			try
            			{
            				Console.WriteLine("Country code of IP address 67.15.94.80: " + geo.GetCountryCode("67.15.94.80"));
            			}
            			catch(Exception ex)
            			{
            				Console.WriteLine(ex.ToString());
            			}
            		}
            	}
            </example>
        </member>
        <member name="M:MaxMind.GeoIPCountry.#ctor(System.IO.Stream)">
            <summary>
            Initialises a new instance of this class.
            </summary>
            <param name="datafile">An already open stream pointing to the contents of a GeoIP.dat file.</param>
            <remarks>The stream is not closed when this class is disposed. Be sure to clean up afterwards!</remarks>
        </member>
        <member name="M:MaxMind.GeoIPCountry.#ctor(System.String)">
            <summary>
            Initialises a new instance of this class, using an on-disk database.
            </summary>
            <param name="filename">Path to database file.</param>
            <remarks>The file will be closed when this class is disposed.</remarks>
        </member>
        <member name="M:MaxMind.GeoIPCountry.GetCountryCode(System.Net.IPAddress)">
            <summary>
            Retrieves a two-letter code, defined by MaxMind, which details the country the specified IP address is located.
            </summary>
            <param name="ip">IP address to query.</param>
            <returns>A two-letter code string. Throws exceptions on failure.</returns>
            <remarks>The IP address must be IPv4.</remarks>
        </member>
        <member name="M:MaxMind.GeoIPCountry.TryGetCountryCode(System.Net.IPAddress)">
            <summary>
            Retrieves a two-letter code, defined by MaxMind, which details the country the specified IP address is located. Does not throw exceptions on failure.
            </summary>
            <param name="ip">IP address to query.</param>
            <returns>Two-letter country code or null on failure.</returns>
        </member>
        <member name="M:MaxMind.GeoIPCountry.GetCountryNameByCode(System.String)">
            <summary>
            Gets the English name of a country, by a country code.
            </summary>
            <param name="countrycode">Country code to look up, returned by GetCountryCode or TryGetCountryCode.</param>
            <returns>English name of the country, or null on failure.</returns>
        </member>
        <member name="M:TShockAPI.HandlerList`1.Register(System.EventHandler{`0},TShockAPI.HandlerPriority,System.Boolean)">
            <summary>
            Register a handler
            </summary>
            <param name="handler">Delegate to be called</param>
            <param name="priority">Priority of the delegate</param>
            <param name="gethandled">Should the handler receive a call even if it has been handled</param>
        </member>
        <member name="T:TShockAPI.IPackable">
            <summary>
            Derived objects can be written to and read from streams.
            </summary>
        </member>
        <member name="M:TShockAPI.IPackable.Pack(System.IO.Stream)">
            <summary>
            Writes object information to the stream
            </summary>
            <param name="stream">Stream to write to</param>
        </member>
        <member name="M:TShockAPI.IPackable.Unpack(System.IO.Stream)">
            <summary>
            Reads object information from the stream
            </summary>
            <param name="stream">Stream to read from</param>
        </member>
        <member name="P:TShockAPI.CommandArgs.Parameters">
            <summary>
            Parameters passed to the arguement. Does not include the command name.
            IE '/kick "jerk face"' will only have 1 argument
            </summary>
        </member>
        <member name="M:TShockAPI.Commands.ParseParameters(System.String)">
            <summary>
            Parses a string of parameters into a list. Handles quotes.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TShockAPI.ConfigFile.Read(System.String)">
            <summary>
            Reads a configuration file from a given path
            </summary>
            <param name="path">string path</param>
            <returns>ConfigFile object</returns>
        </member>
        <member name="M:TShockAPI.ConfigFile.Read(System.IO.Stream)">
            <summary>
            Reads the configuration file from a stream
            </summary>
            <param name="stream">stream</param>
            <returns>ConfigFile object</returns>
        </member>
        <member name="M:TShockAPI.ConfigFile.Write(System.String)">
            <summary>
            Writes the configuration to a given path
            </summary>
            <param name="path">string path - Location to put the config file</param>
        </member>
        <member name="M:TShockAPI.ConfigFile.Write(System.IO.Stream)">
            <summary>
            Writes the configuration to a stream
            </summary>
            <param name="stream">stream</param>
        </member>
        <member name="F:TShockAPI.ConfigFile.ConfigRead">
            <summary>
            On config read hook
            </summary>
        </member>
        <member name="M:TShockAPI.ConfigFile.DumpDescriptions">
            <summary>
            Dumps all configuration options to a text file in Markdown format
            </summary>
        </member>
        <member name="M:TShockAPI.FileTools.CreateFile(System.String)">
            <summary>
            Creates an empty file at the given path.
            </summary>
            <param name="file">The path to the file.</param>
        </member>
        <member name="M:TShockAPI.FileTools.CreateIfNot(System.String,System.String)">
            <summary>
            Creates a file if the files doesn't already exist.
            </summary>
            <param name="file">The path to the files</param>
            <param name="data">The data to write to the file.</param>
        </member>
        <member name="M:TShockAPI.FileTools.SetupConfig">
            <summary>
            Sets up the configuration file for all variables, and creates any missing files.
            </summary>
        </member>
        <member name="M:TShockAPI.FileTools.OnWhitelist(System.String)">
            <summary>
            Tells if a user is on the whitelist
            </summary>
            <param name="ip">string ip of the user</param>
            <returns>true/false</returns>
        </member>
        <member name="P:TShockAPI.FileTools.RulesPath">
            <summary>
            Path to the file containing the rules.
            </summary>
        </member>
        <member name="P:TShockAPI.FileTools.MotdPath">
            <summary>
            Path to the file containing the message of the day.
            </summary>
        </member>
        <member name="P:TShockAPI.FileTools.WhitelistPath">
            <summary>
            Path to the file containing the whitelist.
            </summary>
        </member>
        <member name="P:TShockAPI.FileTools.ConfigPath">
            <summary>
            Path to the file containing the config.
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.TileEdit">
            <summary>
            TileEdit - called when a tile is placed or destroyed
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.TogglePvp">
            <summary>
            TogglePvp - called when a player toggles pvp
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerTeam">
            <summary>
            TogglePvp - called when a player toggles pvp
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerSlot">
            <summary>
            PlayerSlot - called at a PlayerSlot event
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerHP">
            <summary>
            PlayerHP - called at a PlayerHP event
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerMana">
            <summary>
            PlayerMana - called at a PlayerMana event
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerInfo">
            <summary>
            PlayerInfo - called at a PlayerInfo event
            If this is cancelled, the server will ForceKick the player. If this should be changed in the future, let someone know.
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.TileKill">
            <summary>
            TileKill - When a tile is removed fromt he world
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.KillMe">
            <summary>
            KillMe - Terraria's crappy way of handling damage from players
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerUpdate">
            <summary>
            PlayerUpdate - When the player sends it's updated information to the server
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.SendTileSquare">
            <summary>
            SendTileSquare - When the player sends a tile square
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.NewProjectile">
            <summary>
            NewProjectile - Called when a client creates a new projectile
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.LiquidSet">
            <summary>
            LiquidSet - When ever a liquid is set
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerSpawn">
            <summary>
            PlayerSpawn - When a player spawns
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.ChestOpen">
            <summary>
            ChestOpen - Called when any chest is opened
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.ChestItemChange">
            <summary>
            ChestItemChange - Called when an item in a chest changes
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.Sign">
            <summary>
            Sign - Called when a sign is changed
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.NPCHome">
            <summary>
            NPCHome - Called when an NPC's home is changed
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerBuff">
            <summary>
            PlayerBuff - Called when a player is buffed
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.ItemDrop">
            <summary>
            ItemDrop - Called when an item is dropped
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerDamage">
            <summary>
            PlayerDamage - Called when a player is damaged
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.NPCStrike">
            <summary>
            NPCStrike - Called when an NPC is attacked
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.NPCSpecial">
            <summary>
            NPCSpecial - Called at some point
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerAnimation">
            <summary>
            PlayerAnimation - Called when a player animates
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerBuffUpdate">
            <summary>
            PlayerBuffUpdate - Called when a player updates buffs
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.TileEditEventArgs">
            <summary>
            Used when a TileEdit event is called.
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TileEditEventArgs.Player">
            <summary>
            The TSPlayer who made the tile edit
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TileEditEventArgs.X">
            <summary>
            The tile coordinate on the X plane
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TileEditEventArgs.Y">
            <summary>
            The tile coordinate on the Y plane
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TileEditEventArgs.Type">
            <summary>
            The Tile ID being edited.
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TileEditEventArgs.EditType">
            <summary>
            The EditType.
            (KillTile = 0, PlaceTile = 1, KillWall = 2, PlaceWall = 3, KillTileNoItem = 4, PlaceWire = 5, KillWire = 6)
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TileEditEventArgs.Fail">
            <summary>
            Did the tile get destroyed successfully.
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.TogglePvpEventArgs">
            <summary>
            For use in a TogglePvp event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TogglePvpEventArgs.PlayerId">
            <summary>
            The Terraria player ID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TogglePvpEventArgs.Pvp">
            <summary>
            Enable/disable pvp?
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerTeamEventArgs">
            <summary>
            For use in a PlayerTeam event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerTeamEventArgs.PlayerId">
            <summary>
            The Terraria player ID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerTeamEventArgs.Team">
            <summary>
            Enable/disable pvp?
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerSlotEventArgs">
            <summary>
            For use in a PlayerSlot event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerSlotEventArgs.PlayerId">
            <summary>
            The Terraria playerID
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerSlotEventArgs.Slot">
            <summary>
            The slot edited
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerSlotEventArgs.Stack">
            <summary>
            The stack edited
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerSlotEventArgs.Prefix">
            <summary>
            The item prefix
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerSlotEventArgs.Type">
            <summary>
            Item type
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerHPEventArgs">
            <summary>
            For use in a PlayerHP event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerHPEventArgs.PlayerId">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerHPEventArgs.Current">
            <summary>
            Current HP
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerHPEventArgs.Max">
            <summary>
            Maximum HP
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerManaEventArgs">
            <summary>
            For use in a PlayerMana event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerInfoEventArgs.PlayerId">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerInfoEventArgs.Hair">
            <summary>
            Hair color
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerInfoEventArgs.Male">
            <summary>
            Gender (male = true)
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerInfoEventArgs.Difficulty">
            <summary>
            Character difficulty
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerInfoEventArgs.Name">
            <summary>
            Player/character name
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.TileKillEventArgs">
            <summary>
            For use in a TileKill event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TileKillEventArgs.TileX">
            <summary>
            The X coordinate that is being killed
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TileKillEventArgs.TileY">
            <summary>
            The Y coordinate that is being killed
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.KillMeEventArgs">
            <summary>
            For use in a KillMe event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.KillMeEventArgs.PlayerId">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.KillMeEventArgs.Direction">
            <summary>
            The direction the damage is coming from (?)
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.KillMeEventArgs.Damage">
            <summary>
            Amount of damage delt
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.KillMeEventArgs.Pvp">
            <summary>
            Player's current pvp setting
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerUpdateEventArgs">
            <summary>
            For use in a PlayerUpdate event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerUpdateEventArgs.PlayerId">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerUpdateEventArgs.Control">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerUpdateEventArgs.Item">
            <summary>
            Current item?
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerUpdateEventArgs.Position">
            <summary>
            Position of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerUpdateEventArgs.Velocity">
            <summary>
            Velocity of the player
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.SendTileSquareEventArgs">
            <summary>
            For use in a SendTileSquare event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SendTileSquareEventArgs.Size">
            <summary>
            Size of the area
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SendTileSquareEventArgs.TileX">
            <summary>
            A corner of the section
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SendTileSquareEventArgs.TileY">
            <summary>
            A corner of the section
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.NewProjectileEventArgs">
            <summary>
            For use in a NewProjectile event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NewProjectileEventArgs.Identity">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NewProjectileEventArgs.Position">
            <summary>
            Location of the projectile
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NewProjectileEventArgs.Velocity">
            <summary>
            Velocity of the projectile
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NewProjectileEventArgs.Knockback">
            <summary>
            Knockback
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NewProjectileEventArgs.Damage">
            <summary>
            Damage from the projectile
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NewProjectileEventArgs.Owner">
            <summary>
            Terraria playerID owner of the projectile
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NewProjectileEventArgs.Type">
            <summary>
            Type of projectile
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NewProjectileEventArgs.Index">
            <summary>
            ???
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.LiquidSetEventArgs">
            <summary>
            For use in a LiquidSet event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.LiquidSetEventArgs.TileX">
            <summary>
            X location of the tile
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.LiquidSetEventArgs.TileY">
            <summary>
            Y location of the tile
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.LiquidSetEventArgs.Liquid">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.LiquidSetEventArgs.Lava">
            <summary>
            True if lava
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.SpawnEventArgs">
            <summary>
            For use in a PlayerSpawn event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SpawnEventArgs.Player">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SpawnEventArgs.SpawnX">
            <summary>
            X location of the player's spawn
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SpawnEventArgs.SpawnY">
            <summary>
            Y location of the player's spawn
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.ChestOpenEventArgs">
            <summary>
            For use with a ChestOpen event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ChestOpenEventArgs.X">
            <summary>
            X location of said chest
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ChestOpenEventArgs.Y">
            <summary>
            Y location of said chest
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.ChestItemEventArgs">
            <summary>
            For use in a ChestItemChange event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ChestItemEventArgs.ID">
            <summary>
            ChestID
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ChestItemEventArgs.Slot">
            <summary>
            Slot of the item
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ChestItemEventArgs.Stacks">
            <summary>
            How many?
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ChestItemEventArgs.Prefix">
            <summary>
            Item prefix
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ChestItemEventArgs.Type">
            <summary>
            Item type
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.SignEventArgs">
            <summary>
            For use in a Sign event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SignEventArgs.ID">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SignEventArgs.X">
            <summary>
            X location of the sign
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SignEventArgs.Y">
            <summary>
            Y location of the sign
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.NPCHomeChangeEventArgs">
            <summary>
            For use in a NPCHome event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCHomeChangeEventArgs.ID">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCHomeChangeEventArgs.X">
            <summary>
            X location of the NPC home change
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCHomeChangeEventArgs.Y">
            <summary>
            Y location of the NPC home change
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCHomeChangeEventArgs.Homeless">
            <summary>
            ByteBool homeless
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerBuffEventArgs">
            <summary>
            For use in a PlayerBuff event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerBuffEventArgs.ID">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerBuffEventArgs.Type">
            <summary>
            Buff Type
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerBuffEventArgs.Time">
            <summary>
            Time the buff lasts
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.ItemDropEventArgs">
            <summary>
            For use in an ItemDrop event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ItemDropEventArgs.ID">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ItemDropEventArgs.Position">
            <summary>
            Position of the item
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ItemDropEventArgs.Velocity">
            <summary>
            Velocity at which the item is deployed
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ItemDropEventArgs.Stacks">
            <summary>
            Stacks
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ItemDropEventArgs.Prefix">
            <summary>
            Prefix of the item
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ItemDropEventArgs.Type">
            <summary>
            Item type
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerDamageEventArgs">
            <summary>
            For use in a PlayerDamage event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerDamageEventArgs.ID">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerDamageEventArgs.Direction">
            <summary>
            The direction the damage is occuring from
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerDamageEventArgs.Damage">
            <summary>
            Amount of damage
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerDamageEventArgs.PVP">
            <summary>
            If the player has PVP on
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerDamageEventArgs.Critical">
            <summary>
            Is the damage critical?
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.NPCStrikeEventArgs">
            <summary>
            For use with a NPCStrike event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCStrikeEventArgs.ID">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCStrikeEventArgs.Direction">
            <summary>
            Direction the damage occurred from
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCStrikeEventArgs.Damage">
            <summary>
            Amount of damage
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCStrikeEventArgs.PVP">
            <summary>
            Is PVP enabled...?
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCStrikeEventArgs.Critical">
            <summary>
            Critical?
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.NPCSpecialEventArgs">
            <summary>
            For use with a NPCSpecial event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCSpecialEventArgs.ID">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCSpecialEventArgs.Type">
            <summary>
            Type...?
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerAnimationEventArgs">
            <summary>
            For use with a PlayerAnimation event
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerBuffUpdateEventArgs">
            <summary>
            For use in a PlayerBuffUpdate event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerBuffUpdateEventArgs.ID">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="F:TShockAPI.Group.defaultChatColor">
            <summary>
            Default chat color.
            </summary>
        </member>
        <member name="F:TShockAPI.Group.permissions">
            <summary>
            List of permissions available to the group.
            </summary>
        </member>
        <member name="F:TShockAPI.Group.negatedpermissions">
            <summary>
            List of permissions that the group is explicitly barred from.
            </summary>
        </member>
        <member name="M:TShockAPI.Group.HasPermission(System.String)">
            <summary>
            Checks to see if a group has a specified permission.
            </summary>
            <param name="permission">The permission to check.</param>
            <returns>Returns true if the user has that permission.</returns>
        </member>
        <member name="M:TShockAPI.Group.NegatePermission(System.String)">
            <summary>
            Adds a permission to the list of negated permissions.
            </summary>
            <param name="permission">The permission to negate.</param>
        </member>
        <member name="M:TShockAPI.Group.AddPermission(System.String)">
            <summary>
            Adds a permission to the list of permissions.
            </summary>
            <param name="permission">The permission to add.</param>
        </member>
        <member name="M:TShockAPI.Group.SetPermission(System.Collections.Generic.List{System.String})">
            <summary>
            Clears the permission list and sets it to the list provided, 
            will parse "!permssion" and add it to the negated permissions.
            </summary>
            <param name="permission"></param>
        </member>
        <member name="M:TShockAPI.Group.RemovePermission(System.String)">
            <summary>
            Will remove a permission from the respective list,
            where "!permission" will remove a negated permission.
            </summary>
            <param name="permission"></param>
        </member>
        <member name="P:TShockAPI.Group.Name">
            <summary>
            The group's name.
            </summary>
        </member>
        <member name="P:TShockAPI.Group.Parent">
            <summary>
            The group that this group inherits permissions from.
            </summary>
        </member>
        <member name="P:TShockAPI.Group.Prefix">
            <summary>
            The chat prefix for this group.
            </summary>
        </member>
        <member name="P:TShockAPI.Group.Suffix">
            <summary>
            The chat suffix for this group.
            </summary>
        </member>
        <member name="P:TShockAPI.Group.ParentName">
            <summary>
            The name of the parent, not particularly sure why this is here.
            We can use group.Parent.Name and not have this second reference. 
            This was added for rest, so a discussion with Shank is necessary.
            </summary>
        </member>
        <member name="P:TShockAPI.Group.ChatColor">
            <summary>
            The chat color of the group.
            Returns "255255255", sets "255,255,255"
            </summary>
        </member>
        <member name="P:TShockAPI.Group.Permissions">
            <summary>
            The permissions of the user in string form.
            </summary>
        </member>
        <member name="P:TShockAPI.Group.TotalPermissions">
            <summary>
            The permissions of this group and all that it inherits from.
            </summary>
        </member>
        <member name="T:TShockAPI.SuperAdminGroup">
            <summary>
            This class is the SuperAdminGroup, which has access to everything.
            </summary>
        </member>
        <member name="M:TShockAPI.SuperAdminGroup.HasPermission(System.String)">
            <summary>
            Override to allow access to everything.
            </summary>
            <param name="permission">The permission</param>
            <returns>True</returns>
        </member>
        <member name="M:TShockAPI.Log.Initialize(System.String,TShockAPI.LogLevel,System.Boolean)">
            <summary>
            Creates the log file stream and sets the initial log level.
            </summary>
            <param name="filename">The output filename. This file will be overwritten if 'clear' is set.</param>
            <param name="logLevel">The <see cref="T:TShockAPI.LogLevel"/> value which sets the type of messages to output.</param>
            <param name="clear">Whether or not to clear the log file on initialization.</param>
        </member>
        <member name="M:TShockAPI.Log.MayWriteType(TShockAPI.LogLevel)">
            <summary>
            Checks whether the log level contains the specified flag.
            </summary>
            <param name="type">The <see cref="T:TShockAPI.LogLevel"/> value to check.</param>
        </member>
        <member name="M:TShockAPI.Log.Data(System.String)">
            <summary>
            Writes data to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.Log.Error(System.String)">
            <summary>
            Writes an error to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.Log.ConsoleError(System.String)">
            <summary>
            Writes an error to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.Log.Warn(System.String)">
            <summary>
            Writes a warning to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.Log.Info(System.String)">
            <summary>
            Writes an informative string to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.Log.ConsoleInfo(System.String)">
            <summary>
            Writes an informative string to the log file. Also outputs to the console.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.Log.Debug(System.String)">
            <summary>
            Writes a debug string to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.Log.Dispose">
            <summary>
            Disposes objects that are being used.
            </summary>
        </member>
        <member name="M:TShockAPI.Log.Write(System.String,TShockAPI.LogLevel)">
            <summary>
            Internal method which writes a message directly to the log file.
            </summary>
        </member>
        <member name="P:TShockAPI.PacketBufferer.BytesPerUpdate">
            <summary>
            Maximum number of bytes to send per update per socket
            </summary>
        </member>
        <member name="M:TShockAPI.Permissions.GetCommands(System.String)">
            <summary>
            Lists all commands associated with a given permission
            </summary>
            <param name="perm">string permission - the permission to get information on</param>
            <returns>List of commands</returns>
        </member>
        <member name="M:TShockAPI.Permissions.DumpDescriptions">
            <summary>
            Dumps the descriptions of each permission to a file in Markdown format.
            </summary>
        </member>
        <member name="T:TShockAPI.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TShockAPI.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TShockAPI.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TShockAPI.Resources.groups">
             <summary>
               Looks up a localized string similar to #Format
            #name parent permisson1 permission2 permissionN
            #if there is no parent, put null instead
            #groups inherit permissions from their parents
            #put a ! before a permission to negate it
            #Do not remove the group default
            #Do not name a group SuperAdmin, that is hard-coded into the code, it grants total permissions
            #ALWAYS DECLARE A GROUP&apos;S PARENT BEFORE YOU DECLARE THE GROUP
            
            #currently avaliable permissions: 
            #reservedslot	- reserved slot for player
            #canwater		- allow players to use water
            #canlav [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:TShockAPI.Resources.itembans">
             <summary>
               Looks up a localized string similar to #see https://github.com/TShock/TShock/wiki/Item-List for a list of item ids
            #List each banned item ID below this, with each on a new line.
             </summary>
        </member>
        <member name="P:TShockAPI.Resources.users">
             <summary>
               Looks up a localized string similar to #format
            #ip group
            #see groups.txt for a list of groups
            #127.0.0.1 superadmin.
             </summary>
        </member>
        <member name="T:Rests.RestCommandD">
            <summary>
            Rest command delegate
            </summary>
            <param name="parameters">Parameters in the url</param>
            <param name="verbs">{x} in urltemplate</param>
            <returns>Response object or null to not handle request</returns>
        </member>
        <member name="M:Rests.RestCommand.#ctor(System.String,System.String,Rests.RestCommandD)">
            <summary>
            
            </summary>
            <param name="name">Used for identification</param>
            <param name="uritemplate">Url template</param>
            <param name="callback">Rest Command callback</param>
        </member>
        <member name="M:Rests.RestCommand.#ctor(System.String,Rests.RestCommandD)">
            <summary>
            
            </summary>
            <param name="uritemplate">Url template</param>
            <param name="callback">Rest Command callback</param>
        </member>
        <member name="P:Rests.RestObject.Item(System.String)">
            <summary>
            Gets value safely, if it does not exist, return null. Sets/Adds value safely, if null it will remove.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returns null if key does not exist.</returns>
        </member>
        <member name="P:Rests.RestVerbs.Item(System.String)">
            <summary>
            Gets value safely, if it does not exist, return null. Sets/Adds value safely, if null it will remove.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returns null if key does not exist.</returns>
        </member>
        <member name="T:Rests.VerifyD">
            <summary>
            
            </summary>
            <param name="username">Username to verify</param>
            <param name="password">Password to verify</param>
            <returns>Returning a restobject with a null error means a successful verification.</returns>
        </member>
        <member name="T:TShockAPI.Utils">
            <summary>
            Utilities and other TShock core calls that don't fit anywhere else
            </summary>
        </member>
        <member name="F:TShockAPI.Utils.FirstItemPrefix">
            <summary>
            The lowest id for a prefix.
            </summary>
        </member>
        <member name="F:TShockAPI.Utils.LastItemPrefix">
            <summary>
            The highest id for a prefix.
            </summary>
        </member>
        <member name="M:TShockAPI.Utils.GetRealIP(System.String)">
            <summary>
            Provides the real IP address from a RemoteEndPoint string that contains a port and an IP
            </summary>
            <param name="mess">A string IPv4 address in IP:PORT form.</param>
            <returns>A string IPv4 address.</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetPlayers">
            <summary>
            Used for some places where a list of players might be used.
            </summary>
            <returns>String of players seperated by commas.</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetPlayers(System.Boolean)">
            <summary>
            Returns a list of current players on the server
            </summary>
            <param name="includeIDs">bool includeIDs - whether or not the string of each player name should include ID data</param>
            <returns>List of strings with names</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetPlayersWithIds">
            <summary>
            Used for some places where a list of players might be used.
            </summary>
            <returns>String of players and their id seperated by commas.</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetPlayerIP(System.String)">
            <summary>
            Finds a player and gets IP as string
            </summary>
            <param name="playername">string playername</param>
        </member>
        <member name="M:TShockAPI.Utils.Clamp``1(``0,``0,``0)">
            <summary>
            It's a clamp function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Value to clamp</param>
            <param name="max">Maximum bounds of the clamp</param>
            <param name="min">Minimum bounds of the clamp</param>
            <returns></returns>
        </member>
        <member name="M:TShockAPI.Utils.SaveWorld">
            <summary>
            Saves the map data
            </summary>
        </member>
        <member name="M:TShockAPI.Utils.Broadcast(System.String)">
            <summary>
            Broadcasts a message to all players
            </summary>
            <param name="msg">string message</param>
        </member>
        <member name="M:TShockAPI.Utils.Broadcast(System.Int32,System.String,System.Byte,System.Byte,System.Byte)">
            <summary>
            Broadcasts a message from a player, not TShock
            </summary>
            <param name="ply">TSPlayer ply - the player that will send the packet</param>
            <param name="msg">string msg - the message</param>
            <param name="red">r</param>
            <param name="green">g</param>
            <param name="blue">b</param>
        </member>
        <member name="M:TShockAPI.Utils.SendLogs(System.String,Color)">
            <summary>
            Sends message to all users with 'logs' permission.
            </summary>
            <param name="log">Message to send</param>
            <param name="color">Color of the message</param>
        </member>
        <member name="M:TShockAPI.Utils.ActivePlayers">
            <summary>
            The number of active players on the server.
            </summary>
            <returns>int playerCount</returns>
        </member>
        <member name="M:TShockAPI.Utils.FindPlayer(System.String)">
            <summary>
            Finds a TSPlayer based on name or ID
            </summary>
            <param name="plr">Player name or ID</param>
            <returns></returns>
        </member>
        <member name="M:TShockAPI.Utils.GetRandomClearTileWithInRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets a random clear tile in range
            </summary>
            <param name="startTileX">Bound X</param>
            <param name="startTileY">Bound Y</param>
            <param name="tileXRange">Range on the X axis</param>
            <param name="tileYRange">Range on the Y axis</param>
            <param name="tileX">X location</param>
            <param name="tileY">Y location</param>
        </member>
        <member name="M:TShockAPI.Utils.TileValid(System.Int32,System.Int32)">
            <summary>
            Determines if a tile is valid
            </summary>
            <param name="tileX">Location X</param>
            <param name="tileY">Location Y</param>
            <returns>If the tile is valid</returns>
        </member>
        <member name="M:TShockAPI.Utils.TileClear(System.Int32,System.Int32)">
            <summary>
            Checks to see if the tile is clear.
            </summary>
            <param name="tileX">Location X</param>
            <param name="tileY">Location Y</param>
            <returns>The state of the tile</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetItemByIdOrName(System.String)">
            <summary>
            Gets a list of items by ID or name
            </summary>
            <param name="idOrName">Item ID or name</param>
            <returns>List of Items</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetItemById(System.Int32)">
            <summary>
            Gets an item by ID
            </summary>
            <param name="id">ID</param>
            <returns>Item</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetItemByName(System.String)">
            <summary>
            Gets items by name
            </summary>
            <param name="name">name</param>
            <returns>List of Items</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetNPCByIdOrName(System.String)">
            <summary>
            Gets an NPC by ID or Name
            </summary>
            <param name="idOrName"></param>
            <returns>List of NPCs</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetNPCById(System.Int32)">
            <summary>
            Gets an NPC by ID
            </summary>
            <param name="id">ID</param>
            <returns>NPC</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetNPCByName(System.String)">
            <summary>
            Gets a NPC by name
            </summary>
            <param name="name">Name</param>
            <returns>List of matching NPCs</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetBuffName(System.Int32)">
            <summary>
            Gets a buff name by id
            </summary>
            <param name="id">ID</param>
            <returns>name</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetBuffDescription(System.Int32)">
            <summary>
            Gets the description of a buff
            </summary>
            <param name="id">ID</param>
            <returns>description</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetBuffByName(System.String)">
            <summary>
            Gets a list of buffs by name
            </summary>
            <param name="name">name</param>
            <returns>Matching list of buff ids</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetPrefixById(System.Int32)">
            <summary>
            Gets a prefix based on its id
            </summary>
            <param name="id">ID</param>
            <returns>Prefix name</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetPrefixByName(System.String)">
            <summary>
            Gets a list of prefixes by name
            </summary>
            <param name="name">Name</param>
            <returns>List of prefix IDs</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetPrefixByIdOrName(System.String)">
            <summary>
            Gets a prefix by ID or name
            </summary>
            <param name="idOrName">ID or name</param>
            <returns>List of prefix IDs</returns>
        </member>
        <member name="M:TShockAPI.Utils.ForceKickAll(System.String)">
            <summary>
            Kicks all player from the server without checking for immunetokick permission.
            </summary>
            <param name="ply">int player</param>
            <param name="reason">string reason</param>
        </member>
        <member name="M:TShockAPI.Utils.StopServer(System.Boolean,System.String)">
            <summary>
            Stops the server after kicking all players with a reason message, and optionally saving the world
            </summary>
            <param name="save">bool perform a world save before stop (default: true)</param>
            <param name="reason">string reason (default: "Server shutting down!")</param>
        </member>
        <member name="M:TShockAPI.Utils.ForceKick(TShockAPI.TSPlayer,System.String,System.Boolean,System.Boolean)">
            <summary>
            Kicks a player from the server without checking for immunetokick permission.
            </summary>
            <param name="ply">int player</param>
            <param name="reason">string reason</param>
            <param name="silent">bool silent (default: false)</param>
        </member>
        <member name="M:TShockAPI.Utils.Kick(TShockAPI.TSPlayer,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Kicks a player from the server..
            </summary>
            <param name="ply">int player</param>
            <param name="reason">string reason</param>
            <param name="force">bool force (default: false)</param>
            <param name="silent">bool silent (default: false)</param>
            <param name="adminUserName">string adminUserName (default: null)</param>
            <param name="saveSSI">bool saveSSI (default: false)</param>
        </member>
        <member name="M:TShockAPI.Utils.Ban(TShockAPI.TSPlayer,System.String,System.Boolean,System.String)">
            <summary>
            Bans and kicks a player from the server.
            </summary>
            <param name="ply">int player</param>
            <param name="reason">string reason</param>
            <param name="force">bool force (default: false)</param>
            <param name="adminUserName">bool silent (default: null)</param>
        </member>
        <member name="M:TShockAPI.Utils.ShowFileToUser(TShockAPI.TSPlayer,System.String)">
            <summary>
            Shows a file to the user.
            </summary>
            <param name="ply">int player</param>
            <param name="file">string filename reletave to savedir</param>
        </member>
        <member name="M:TShockAPI.Utils.GetGroup(System.String)">
            <summary>
            Returns a Group from the name of the group
            </summary>
            <param name="ply">string groupName</param>
        </member>
        <member name="M:TShockAPI.Utils.GetIPv4Address(System.String)">
            <summary>
            Returns an IPv4 address from a DNS query
            </summary>
            <param name="hostname">string ip</param>
        </member>
        <member name="F:TShockAPI.Utils.HashAlgo">
            <summary>
            Default hashing algorithm.
            </summary>
        </member>
        <member name="F:TShockAPI.Utils.HashTypes">
            <summary>
            A dictionary of hashing algortihms and an implementation object.
            </summary>
        </member>
        <member name="M:TShockAPI.Utils.HashPassword(System.Byte[])">
            <summary>
            Returns a Sha256 string for a given string
            </summary>
            <param name="bytes">bytes to hash</param>
            <returns>string sha256</returns>
        </member>
        <member name="M:TShockAPI.Utils.HashPassword(System.String)">
            <summary>
            Returns a Sha256 string for a given string
            </summary>
            <param name="bytes">bytes to hash</param>
            <returns>string sha256</returns>
        </member>
        <member name="M:TShockAPI.Utils.ValidString(System.String)">
            <summary>
            Checks if the string contains any unprintable characters
            </summary>
            <param name="str">String to check</param>
            <returns>True if the string only contains printable characters</returns>
        </member>
        <member name="M:TShockAPI.Utils.MaxChests">
            <summary>
            Checks if world has hit the max number of chests
            </summary>
            <returns>True if the entire chest array is used</returns>
        </member>
        <member name="M:TShockAPI.Utils.SearchProjectile(System.Int16,System.Int32)">
            <summary>
            Searches for a projectile by identity and owner
            </summary>
            <param name="identity">identity</param>
            <param name="owner">owner</param>
            <returns>projectile ID</returns>
        </member>
        <member name="M:TShockAPI.Utils.SanitizeString(System.String)">
            <summary>
            Sanitizes input strings
            </summary>
            <param name="str">string</param>
            <returns>sanitized string</returns>
        </member>
        <member name="F:TShockAPI.TShock.RESTStartupTokens">
            <summary>
            Used for implementing REST Tokens prior to the REST system starting up.
            </summary>
        </member>
        <member name="M:TShockAPI.TShock.CurrentDomain_UnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Handles exceptions that we didn't catch or that Red fucked up
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TShockAPI.TShock.ServerHooks_OnCommand(System.String,System.ComponentModel.HandledEventArgs)">
            <summary>
            When a server command is run.
            </summary>
            <param name="cmd"></param>
            <param name="e"></param>
        </member>
        <member name="M:TShockAPI.TShock.SendBytes(Terraria.ServerSock,System.Byte[])">
            <summary>
            Send bytes to client using packetbuffering if available
            </summary>
            <param name="client">socket to send to</param>
            <param name="bytes">bytes to send</param>
            <returns>False on exception</returns>
        </member>
        <member name="M:TShockAPI.TShock.SendBytesBufferless(Terraria.ServerSock,System.Byte[])">
            <summary>
            Send bytes to a client ignoring the packet buffer
            </summary>
            <param name="client">socket to send to</param>
            <param name="bytes">bytes to send</param>
            <returns>False on exception</returns>
        </member>
        <member name="E:TShockAPI.TShock.Initialized">
            <summary>
            Called after TShock is initialized. Useful for plugins that needs hooks before tshock but also depend on tshock being loaded.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.Server">
            <summary>
            This represents the server as a player.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.All">
            <summary>
            This player represents all the players.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.LastPvpChange">
            <summary>
            The last time the player changed their team or pvp status.  
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.TempPoints">
            <summary>
            Temp points for use in regions and other plugins.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.AwaitingResponse">
            <summary>
            A list of command callbacks indexed by the command they need to do.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.DisplayLogs">
            <summary>
            Whether the player should see logs.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.LastWhisper">
            <summary>
            The last player that the player whispered with( to or from ).
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.HasBeenSpammedWithBuildMessage">
            <summary>
            Unused can be removed.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.IsLoggedIn">
            <summary>
            Whether the player is logged in or not.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.UserID">
            <summary>
            The player's user id( from the db ).
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.HasBeenNaggedAboutLoggingIn">
            <summary>
            Whether the player has been nagged about logging in.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.mute">
            <summary>
            Whether the player is muted or not.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.Dead">
            <summary>
            Whether the player is dead or not.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.Difficulty">
            <summary>
            The players difficulty( normal[softcore], mediumcore, hardcore ).
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.PlayerData">
            <summary>
            The player's server side inventory data.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.RequiresPassword">
            <summary>
            Whether the player needs to specify a password upon connection( either server or user account ).
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.IceTiles">
            <summary>
            A list of points where ice tiles have been placed.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.RPm">
            <summary>
            Unused, can be removed.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.WPm">
            <summary>
            World protection message cool down.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.SPm">
            <summary>
            Spawn protection message cool down.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.BPm">
            <summary>
            Permission to build message cool down.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.LoginMS">
            <summary>
            The time in ms when the player has logged in.  
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.LoginHarassed">
            <summary>
            Whether the player has been harrassed about logging in due to server side inventory or forced login.
            </summary>
        </member>
        <member name="M:TShockAPI.TSPlayer.SaveServerInventory">
            <summary>
            Saves the player's inventory to SSI
            </summary>
            <returns>bool - True/false if it saved successfully</returns>
        </member>
        <member name="M:TShockAPI.TSPlayer.AddResponse(System.String,System.Action{System.Object})">
            <summary>
            Adds a command callback to a specified command string.
            </summary>
            <param name="name">The string representing the command i.e "yes" == /yes</param>
            <param name="callback">The method that will be executed on confirmation ie user accepts</param>
        </member>
        <member name="P:TShockAPI.TSPlayer.TileKillThreshold">
            <summary>
            The amount of tiles that the player has killed in the last second.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.TilePlaceThreshold">
            <summary>
            The amount of tiles the player has placed in the last second.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.TileLiquidThreshold">
            <summary>
            The amount of liquid( in tiles ) that the player has placed in the last second.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.ProjectileThreshold">
            <summary>
            The number of projectiles created by the player in the last second.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.TilesDestroyed">
            <summary>
            A queue of tiles destroyed by the player for reverting.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.TilesCreated">
            <summary>
            A queue of tiles placed by the player for reverting.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.Group">
            <summary>
            The player's group.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.Index">
            <summary>
            The players index in the player array( Main.players[] ).
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.AwaitingTempPoint">
            <summary>
            Whether the player is waiting to place/break a tile to set as a temp point.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.LastThreat">
            <summary>
            The last time a player broke a grief check.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.LastTileChangeNotify">
            <summary>
            Not used, can be removed.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.LoginAttempts">
            <summary>
            The number of unsuccessful login attempts.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.UserAccountName">
            <summary>
            The player's login name.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.LastDeath">
            <summary>
            The last time the player died.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.RealPlayer">
            <summary>
            Whether the player is a real, human, player on the server.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.TPlayer">
            <summary>
            Terraria Player
            </summary>
        </member>
        <member name="F:TShockAPI.UpdateManager.CheckXMinutes">
            <summary>
            Check once every X minutes.
            </summary>
        </member>
        <member name="M:TShockAPI.UpdateManager.ServerIsOutOfDate">
            <summary>
            Checks to see if the server is out of date.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TShockAPI.DB.WarpManager.ListAllPublicWarps(System.String)">
            <summary>
            Gets all the warps names from world
            </summary>
            <param name="worldid">World name to get warps from</param>
            <returns>List of warps with only their names</returns>
        </member>
        <member name="M:TShockAPI.DB.WarpManager.HideWarp(System.String,System.Boolean)">
            <summary>
            Gets all the warps names from world
            </summary>
            <param name="worldid">World name to get warps from</param>
            <returns>List of warps with only their names</returns>
        </member>
    </members>
</doc>
